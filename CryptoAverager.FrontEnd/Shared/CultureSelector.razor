@inject IConfiguration _configuration
@inject IStringLocalizer<App> _localiser
@inject NavigationManager NavigationManager

@if (cultures != null)
{
    <form class="form-inline">
        <select id="language-selector" class="form-control mr-2" @bind="selectedCulture">
        </select>

        <button class="btn btn-primary" @onclick="RequestCultureChange">@_localiser["choose_language_button_text"]</button>
    </form>
}

@code
{
    [Inject]
    protected IJSRuntime JsRunTime { get; set; }

    // Get the current culture for the user
    private string selectedCulture = System.Threading.Thread.CurrentThread.CurrentCulture.Name;

    private Dictionary<string, string> cultures;

    private DotNetObjectReference<CultureSelector> dotNetObjRef;

    protected override void OnInitialized()
    {
        cultures = _configuration.GetSection("Cultures").GetChildren().ToDictionary(x => x.Key, x => x.Value);
    }

    private async Task SendDotNetInstanceToJs()
    {
        dotNetObjRef = DotNetObjectReference.Create(this);
        await JsRunTime.InvokeVoidAsync("updateCulture", dotNetObjRef);
    }

    /// <summary>
    /// To avoid a memory leak and allow garbage collection I dispose the DotNetObjectReferneceObject
    /// </summary>
    private void Dispose()
    {
        dotNetObjRef.Dispose();
    }

    /// <summary>
    /// This method invokes a jquery function which updates the Country Select JS plugin with the selectedCulture
    /// </summary>
    /// <returns></returns>
    private async Task SetCulture()
    {
        await JsRunTime.InvokeVoidAsync("setLanguageSelector", selectedCulture.Split('-')[1].ToLower());
    }

    /// <summary>
    /// This method is invoked by JS once the user has clicked the button to change the language. 
    /// The selectedCultureIso parameter is the current selected country in the Country Select JS plugin which is used to update the selectedCulture
    /// </summary>
    /// <param name="selectedCultureIso"></param>
    [JSInvokable]
    public void UpdateSelectedCultureBind(string selectedCultureIso)
    {
        if (string.IsNullOrEmpty(selectedCultureIso))
        {
            return;
        }

        // the country iso code that I get back from the Country Select JS plugin is different so I just need to compare after the -
        var cultureInfo = cultures.Where(x => x.Key.Split('-')[1].ToLower() == selectedCultureIso).SingleOrDefault().Key;

        if (cultureInfo == null)
        {
            return;
        }

        // Update the selected culture bind
        selectedCulture = cultureInfo;
    }


    public async void RequestCultureChange()
    {
        // Invoke the JS function to update the selected culture
        await SendDotNetInstanceToJs();

        if (string.IsNullOrEmpty(selectedCulture))
        {
            return;
        }

        var test = selectedCulture;



        var uri = new Uri(NavigationManager.Uri)
             .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

        var query = $"?culture={Uri.EscapeDataString(selectedCulture)}&" +
            $"redirectUri={Uri.EscapeDataString(uri)}";

        NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRunTime.InvokeVoidAsync("onBlazorReady");
        }

        // I need to do this because the plugin doesn't know about the user's current culture
        await SetCulture();
    }
}



